####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

import os.path
Import(['env'])

# Temporary copy of the global environment so we can fiddle with flags
tmpEnvironment = env.Clone()

# Change to then name of this module
kerneldir = "#" + env["PEDIGREE_BUILD_KERNEL"]
objname = kerneldir + '/kernel'

env.Alias("kernel", objname)

# To include a new subdirectory just add to the list.
subdirs = [
    
]

# To include new files just add to the list, or Glob("*.cpp")
files = [
    'Log.cc',
    'Version.cc',
    'Archive.cc',
    'Spinlock.cc',
    'Subsystem.cc',
    'ServiceManager.cc',
    'Service.cc',
    Glob('utilities/*.cc'),
    Glob('utilities/sha1/*.cc'),
    Glob('machine/*.cc'),
    Glob('linker/*.cc'),
    Glob('core/*.cc'),
    Glob('core/process/*.cc'),
    Glob('core/processor/*.cc'),
    Glob('core/lib/*.cc'),
    Glob('core/lib/*.c'),
    Glob('config/*.cc')
]

if 'DEBUGGER' in env['CPPDEFINES']:
	files += [
		Glob('debugger/*.cc'),
		Glob('debugger/commands/*.cc'),
	]
else:
	files += [
		Glob('debugger/panic.cc'),
		Glob('debugger/SerialIO.cc'),
		Glob('debugger/LocalIO.cc'),
		Glob('debugger/DebuggerIO.cc'),
	]

libudis86_files = [
]

# To include a new directory for includes, just add it to the list
include = [
    '#/src/system/include',
    'debugger/',
    'debugger/commands/',
    'debugger/libudis86/',
    'linker/',
    'core/',
    'core/lib/',
    '.'
]

# To add a library add to the list below
libraries = [
    'gcc'
]

# To add a library path add to the list below
libpaths = [
    # env['LIBGCC']
]

#####################################
## Architecture-specific files
#####################################
if 'X86_COMMON' in env['CPPDEFINES']:
    files += [
        Glob('machine/x86_common/*.cc'),
        'machine/x86_common/x86emu/debug.c',
        'machine/x86_common/x86emu/decode.c',
        'machine/x86_common/x86emu/fpu.c',
        'machine/x86_common/x86emu/ops.c',
        'machine/x86_common/x86emu/ops2.c',
        'machine/x86_common/x86emu/prim_ops.c',
        'machine/x86_common/x86emu/sys.c',
        Glob('core/processor/x86_common/*.cc'),
    ]
    if 'DEBUGGER' in env['CPPDEFINES']:
        files += [Glob('debugger/libudis86/*.c')]
    include += ['machine/x86_common/x86_emu/x86emu/']

if env['ARCH_TARGET'] == 'X86':
    files += [
        Glob('core/processor/x86/*.cc'),
        'core/processor/x86/asm/boot-standalone.s',
        'core/processor/x86/asm/InterruptManager.s',
        'core/processor/x86/asm/Processor.s',
        'core/processor/x86/asm/Scheduler.s'
    ]

if env['ARCH_TARGET'] == 'X64':
    files += [
        Glob('core/processor/x64/*.cc'),
        'core/processor/x64/asm/boot-standalone.s',
        'core/processor/x64/asm/InterruptManager.s',
        'core/processor/x64/asm/SyscallManager.s',
        'core/processor/x64/asm/Processor.s',
        'core/processor/x64/asm/Scheduler.s',
        'core/processor/x64/asm/gdt.s'
    ]

for i in include:
    print env.Dir(i).abspath
tmpEnvironment['CPPPATH'] = include
tmpEnvironment['LIBS'] = libraries
tmpEnvironment['LIBPATH'] = libpaths

SConscript([os.path.join(i, 'SConscript') for i in subdirs],exports = ['env'])

tmpEnvironment.Program(objname, files)
