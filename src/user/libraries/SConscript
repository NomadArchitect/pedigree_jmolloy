####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

Import(['env'])

import os

import buildutils.userspace

tmp = env.Clone()

####### END-USER LIBRARY BUILDS #######

libsbase        = 'libraries/'
appoutputdir    = "#" + env["PEDIGREE_BUILD_APPS"]
imagesdir       = env["PEDIGREE_IMAGES_DIR"]
builddir        = "#" + env["PEDIGREE_BUILD_BASE"]

# Libraries to compile
libs = [
    'libui'
]

# Subsystem for each set of libraries
subsys = {
    'libui' : 'native'
}

tmp['CFLAGS'] = buildutils.userspace.fixFlags(env, env['CFLAGS'])
tmp['CXXFLAGS'] = buildutils.userspace.fixFlags(env, env['CXXFLAGS'])
tmp['CPPDEFINES'] += ['PEDIGREE', '__PEDIGREE__']
tmp['LIBS'] = []
tmp['LIBPATH'] = [
    builddir,
]
tmp['CPPPATH'] = []

for library in libs:
    e = tmp.Clone()
    
    # Determine the subsystem and include directories for this library
    incpath = []
    s = subsys[library]
    if s == 'native':
        cpp_base = '#/images/local/support/gcc/include/c++/%s' % (env['COMPILER_VERSION'],)
        incpath += ['#/src/subsys/native/include',
                    cpp_base,
                    '%s/%s' % (cpp_base, env['COMPILER_TARGET']),
                    ]
    else:
        print "** Library with subsys '%s' is not buildable - fix src/user/libraries/SConscript!" % (s)

    srcdir = env.Dir(library).srcnode().abspath

    # Handle extra include directories within the library
    if(os.path.exists(os.path.join(srcdir, 'include'))):
        incpath.append(os.path.join(srcdir, 'include'))

    e['CPPPATH'] = incpath

    output = os.path.join(builddir, 'libs', '%s.a' % (library,))
    shoutput = os.path.join(builddir, 'libs', '%s.so' % (library,))
    files = [Glob(os.path.join(library, 'src', '*.c')), Glob(os.path.join(library, 'src', '*.cc'))]

    e.StaticLibrary(output, files)
    e.SharedLibrary(shoutput, files, LINKFLAGS='')

    env.Alias("libs", output)
    env.Alias("libs", shoutput)

    # XXX: We have an unfortunate dependency on libc.
    libc_objname = builddir + '/libc.so'
    env.Depends(shoutput, libc_objname)

