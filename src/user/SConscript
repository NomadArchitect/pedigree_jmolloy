####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

import os.path
Import(['env'])

tmp = env.Clone()

####### APPLICATION BUILDS #######

# Cleans a set of flags so we can build proper applications rather than
# freestanding binaries.
def fixFlags(flags):
    flags = flags.replace('-nostdinc', '')
    flags = flags.replace('-ffreestanding', '')
    flags = flags.replace('-nostdlib', '')
    if env['ARCH_TARGET']  in ['X86', 'X64']:
        flags += ' -msse2'
    if env['ARCH_TARGET'] == 'PPC':
        flags += ' -U__svr4__ '
    return flags

appsbase = 'applications/'
appoutputdir    = "#" + env["PEDIGREE_BUILD_APPS"]
imagesdir       = env["PEDIGREE_IMAGES_DIR"]
builddir        = "#" + env["PEDIGREE_BUILD_BASE"]

# Applications which just use POSIX libc/libm
posixc_apps = [
    'syscall-test',
    'net-test',
    'login',
    'keymap',
    'mount',
    'display-mode',
    'reboot',
    'sudo',
    'modload',
    'modunload',
    'modlist'
]

# Applications which use libSDL
sdl_apps = [
    'fire'
]

# Applications which use libpedigree and/or libstdc++
cpp_apps = [
    'TUI',
    'apptest',
    'config',
    'thread-test'
]

# Custom include paths for specific applications
custom_incpath = {
    'TUI' : ['#/src/modules/system/TUI',
             '#/src/user/applications/TUI/include']
}

# Custom libraries for specific applications
custom_libs = {
    'TUI' : ['png', 'freetype', 'z'],
    'thread-test' : ['pthread']
}

# Default libraries for all applications
default_libs = ['gcc', 'c', 'm', 'pedigree-c']

# Search paths for libraries
libpath = [
    builddir
]

# Default include paths
incpath = [
    '#/src/subsys/posix/include'
]

all_apps = posixc_apps + sdl_apps + cpp_apps

tmp['CFLAGS'] = fixFlags(env['CFLAGS'])
tmp['CXXFLAGS'] = fixFlags(env['CXXFLAGS'])
tmp['CPPDEFINES'] += ['PEDIGREE', '__PEDIGREE__']
tmp['LIBS'] = default_libs
tmp['LIBPATH'] = libpath
tmp['CPPPATH'] = incpath

for i in all_apps:
    e = tmp.Clone()

    if i in sdl_apps:
        e['LIBS'] += ['SDL', 'pthread']
        e['CPPPATH'] += ['#/src/lgpl/SDL-1.2.14/include']

    # SDL apps require libpedigree (C++)
    if i in cpp_apps or i in sdl_apps:
        e['LIBS'] += ['pedigree', 'stdc++']
        e['LIBPATH'] += [imagesdir + 'libraries']
        e['CPPPATH'] += ['#/src/subsys/native/include',
                         '#/src/subsys/posix/include/c++/4.3.2',
                         '#/src/subsys/posix/include/c++/4.3.2/i686-pedigree']

    base = appsbase + i

    # Handle extra include directories
    if(os.path.exists(base + '/include')):
        e['CPPPATH'] += [base + '/include']
    if(custom_incpath.has_key(i)):
        e['CPPPATH'] += custom_incpath[i]
    if(custom_libs.has_key(i)):
        e['LIBS'] += custom_libs[i]

    output = builddir + '/apps/' + i
    files = [Glob(base + '/*.c'), Glob(base + '/*.cc')]
    e.Program(output, files, LINKFLAGS='')

    env.Alias("apps", output)

    env.Depends(output, "crt0")
    env.Depends(output, "libs")
