#!/usr/bin/env python2.7
'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

Import(['env'])

import os

import buildutils.userspace

# Build libraries & other support directories before applications.
subdirs = ['libraries']
SConscript([os.path.join(i, 'SConscript') for i in subdirs],exports = ['env'])

tmp = env.Clone()

####### APPLICATION BUILDS #######

appsbase = 'applications/'
appoutputdir    = "#" + env["PEDIGREE_BUILD_APPS"]
imagesdir       = env["PEDIGREE_IMAGES_DIR"]
builddir        = "#" + env["PEDIGREE_BUILD_BASE"]

suffix = '-noarch'
if env['ARCH_TARGET'] == 'X86':
    suffix = '-i686'
elif env['ARCH_TARGET'] == 'X64':
    suffix = '-amd64'
elif env['ARCH_TARGET'] == 'PPC':
    suffix = '-ppc'
elif env['ARCH_TARGET'] == 'ARM':
    suffix = '-arm'

# libloader (userspace dynamic linker)
libload_sources = [
    'loader.cc',
    'stubs%s.s' % (suffix,)
]

# Applications which just use POSIX libc/libm
posixc_apps = [
    'syscall-test',
    'net-test',
    'login',
    'keymap',
    'mount',
    'display-mode',
    'reboot',
    'sudo',
    'modload',
    'modunload',
    'modlist',
    'crashtest',
    'gears',
    'init',
    'preloadd',
    'nyancat',
    'testsuite',
]

# Applications which use Mesa
mesa_apps = [
    'gears',
]

# Applications which use libSDL
sdl_apps = [
    'fire'
]

# Applications which use libpedigree and/or libstdc++
cpp_apps = [
    'TUI',
    'apptest',
    'config',
    'thread-test',
    'ipc-test-server',
    'ipc-test-client',
    'winman',
    'uitest',
    'ttyterm',
]

# Custom include paths for specific applications
custom_incpath = {
    'TUI' : ['#/src/user/libraries/libui/include',
             '#/src/modules/system/TUI',
             '#/images/local/include',
             '#/images/local/include/freetype2'],
    'uitest' : ['#/src/user/libraries/libui/include'],
    'gears' : ['#/src/user/libraries/libui/include'],
    'winman' : ['#/src/user/libraries/libui/include',
                '#/src/user/libraries/libui/src',
                '#/images/local/include',
                '#/images/local/include/pixman-1',
                '#/images/local/include/freetype2']
}

# Custom libraries for specific applications
custom_libs = {
    'TUI' : ['cairo', 'freetype', 'png', 'ui', 'iconv', 'pedigree'],
    'config': ['pedigree'],
    'ipc-test-server': ['pedigree'],
    'ipc-test-client': ['pedigree'],
    'ttyterm': ['pedigree'],
    'thread-test' : ['pthread'],
    'uitest' : ['ui', 'pedigree'],
    'gears' : ['ui'],
    'winman': ['cairo', 'freetype', 'png', 'pedigree'],
}

# Default libraries for all applications
default_libs = ['pthread']

# Search paths for libraries
libpath = [
    builddir,
    builddir + '/libs',
]

# Default include paths
incpath = [
    '#/src/subsys/posix/include',
    '#/src/subsys/posix/syscalls',
]

all_apps = posixc_apps + sdl_apps + cpp_apps

tmp['CFLAGS'] = buildutils.userspace.fixFlags(env, env['CFLAGS'])
tmp['CXXFLAGS'] = buildutils.userspace.fixFlags(env, env['CXXFLAGS'])
tmp['CPPDEFINES'] += ['PEDIGREE', '__PEDIGREE__']
tmp['LIBS'] = default_libs
tmp['LIBPATH'] = libpath
tmp['CPPPATH'] = incpath

# -static stops GCC placing the path to the dynamic linker into the binary, and creates a non-relocateable executable.
libload_env = tmp.Clone()
libload_env['CFLAGS'] += ' -static '
libload_env['CXXFLAGS'] += ' -static '
cpp_base = '#/images/local/support/gcc/include/c++/%s' % (env['COMPILER_VERSION'],)
libload_env['CPPPATH'] += ['#/src/system/include/linker',
                           cpp_base,
                           '%s/%s' % (cpp_base, env['COMPILER_TARGET']),
                           ]
libload_env['LIBPATH'] += [builddir, imagesdir + 'libraries']
libload_env['LIBS'] = ['-lgcc', '-lstdc++', '-lc', '-lpedigree', '-lpedigree-c']
libload = os.path.join(builddir, 'libload.so')
libload_linkscript = libload_env.File(os.path.join(appsbase, 'libload', 'libload.ld'))
in_files = [os.path.join(appsbase, 'libload', x) for x in libload_sources]
libload_env.Program(libload, in_files, LINKFLAGS="-static -Wl,-Bstatic -Wl,--no-whole-archive -nodefaultlibs -T%s " % (libload_linkscript,))
libload_env.Depends(libload, "crt0")

env.Alias('libs', libload)

for i in all_apps:
    e = tmp.Clone()
    e['LINKFLAGS'] = ''
    e['LIBPATH'] = libpath

    base = appsbase + i

    # Handle custom paths and libraries.
    if(os.path.exists(base + '/include')):
        e['CPPPATH'] += [base + '/include']
    if(custom_incpath.has_key(i)):
        e['CPPPATH'] += custom_incpath[i]
    if(custom_libs.has_key(i)):
        e['LIBS'] += custom_libs[i]

    # Handle SDL dependencies.
    if i in sdl_apps:
        e['LIBS'] += ['SDL']
        e['CPPPATH'] += ['#/src/lgpl/SDL-1.2.14/include',
                         '#/images/local/include']
    if i in mesa_apps:
        e['LIBS'] += ['OSMesa']
        e['LIBPATH'] += ['%s/libraries' % (imagesdir,)]
        e['CPPPATH'] += ['%s/include' % (imagesdir,)]

    # Handle C++-related dependencies.
    if i in cpp_apps or i in sdl_apps or i in mesa_apps:
        e['LIBPATH'] += [imagesdir + 'libraries']
        e['CPPPATH'] += ['#/src/subsys/native/include',]
        e['LINK'] = env['CXX']

    e['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s/libraries/ ' % (e.Dir(imagesdir).abspath,)
    e['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s/libs/ ' % (e.Dir(builddir).abspath,)
    e['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s ' % (e.Dir(builddir).abspath,)

    output = builddir + '/apps/' + i
    files = [Glob(base + '/*.c'), Glob(base + '/*.cc')]
    e.Program(output, files)

    env.Alias("apps", output)

    env.Depends(output, "crt0")
    env.Depends(output, "libs")

