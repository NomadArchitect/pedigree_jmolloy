#!/usr/bin/env python2.7
'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

import os

import buildutils.userspace

Import(['env'])

env_clone = env.Clone()

appsbase = 'applications'
appoutputdir = env["PEDIGREE_BUILD_APPS"]
imagesdir = env["PEDIGREE_IMAGES_DIR"]
builddir = env["PEDIGREE_BUILD_BASE"]

suffix = '-noarch'
if env['ARCH_TARGET'] == 'X86':
    suffix = '-i686'
elif env['ARCH_TARGET'] == 'X64':
    suffix = '-amd64'
elif env['ARCH_TARGET'] == 'PPC':
    suffix = '-ppc'
elif env['ARCH_TARGET'] == 'ARM':
    suffix = '-arm'

# libloader (userspace dynamic linker).
libload_sources = [
    'loader.cc',
    'stubs%s.s' % suffix,
]

# Applications which just use POSIX libc/libm.
posixc_apps = [
    'crashtest',
    'display-mode',
    'gears',
    'init',
    'keymap',
    'login',
    'modlist',
    'modload',
    'modunload',
    'mount',
    'net-test',
    'nyancat',
    'preloadd',
    'reboot',
    'sudo',
    'syscall-test',
    'testsuite',
]

# Applications which use Mesa (affects libraries & headers).
mesa_apps = [
    'gears',
]

# Applications which use libSDL (affects libraries & headers).
sdl_apps = [
    'fire'
]

# Applications which use libpedigree and/or libstdc++.
cpp_apps = [
    'apptest',
    'config',
    'ipc-test-client',
    'ipc-test-server',
    'thread-test',
    'ttyterm',
    'TUI',
    'uitest',
]

# Applications which require C++11.
cpp_11_apps = [
    'which',
    'winman',
]

# Applications which use libui (affects libraries & headers).
libui_apps = [
    'gears',
    'TUI',
    'uitest',
]

# Custom include paths for specific applications.
custom_incpath = {
    'TUI' : ['#images/local/include',
             '#images/local/include/freetype2'],
    'winman' : ['#src/user/libraries/libui/include',
                '#src/user/libraries/libui/src',
                '#images/local/include',
                '#images/local/include/pixman-1',
                '#images/local/include/freetype2']
}

# Custom libraries for specific applications
custom_libs = {
    'config': ['pedigree'],
    'ipc-test-client': ['pedigree'],
    'ipc-test-server': ['pedigree'],
    'thread-test' : ['pthread'],
    'ttyterm': ['pedigree'],
    'TUI' : ['cairo', 'freetype', 'png', 'iconv', 'pedigree'],
    'uitest' : ['pedigree'],
    'winman': ['cairo', 'freetype', 'png', 'pedigree'],
    'apptest': ['pedigree'],
}

# Default libraries for all applications
base_libs = ['pthread']

# Default include paths
base_include_dirs = [
    '#src/subsys/posix/include',
    '#src/subsys/posix/syscalls',
]

# Flags from CXXFLAGS and CFLAGS to *remove* for an app
remove_flags = {
    # fire is more or less pre-C99 code.
    'fire' : ['-Werror'],
    # TODO: fix nyancat's code to not be warning-heavy...
    'nyancat': ['-Werror'],
    'which': ['-Werror'],
}

env_clone['CFLAGS'] = buildutils.userspace.fixFlags(env, env['CFLAGS'])
env_clone['CCFLAGS'] = buildutils.userspace.fixFlags(env, env['CCFLAGS'])
env_clone['CXXFLAGS'] = buildutils.userspace.fixFlags(env, env['CXXFLAGS'])
env_clone['CPPDEFINES'] += ['PEDIGREE', '__PEDIGREE__']
env_clone['LIBS'] = base_libs
env_clone['LIBPATH'] = [builddir, os.path.join(builddir, 'libs')]
env_clone['CPPPATH'] = base_include_dirs

# -static stops GCC placing the path to the dynamic linker into the binary, and creates a non-relocateable executable.
libload_env = env_clone.Clone()
libload_env.MergeFlags('-static')
cpp_base = '#images/local/support/gcc/include/c++/%s' % env['CCVERSION']
libload_env['CPPPATH'] += ['#src/system/include/linker', cpp_base,
                           os.path.join(cpp_base, env['COMPILER_TARGET'])]
libload_env['LIBPATH'] += [builddir, imagesdir + 'libraries']
libload_env['LIBS'] = ['-lstdc++', '-lc', '-lpedigree', '-lpedigree-c', '-lgcc']
libload = os.path.join(builddir, 'libload.so')
if env['ARCH_TARGET'] == 'ARM':
    libload_linkscript = libload_env.File(os.path.join(appsbase, 'libload', 'libload-arm.ld'))
else:
    libload_linkscript = libload_env.File(os.path.join(appsbase, 'libload', 'libload.ld'))
in_files = [os.path.join(appsbase, 'libload', x) for x in libload_sources]
libload_env.Program(libload, in_files,
    LINKFLAGS="-static -Wl,-Bstatic -Wl,--no-whole-archive -nodefaultlibs -T%s " % libload_linkscript)
libload_env.Depends(libload, "crt0")

env.Alias('libs', libload)

for app in set(posixc_apps + mesa_apps + sdl_apps + cpp_apps + cpp_11_apps + libui_apps):
    app_env = env_clone.Clone()
    app_env['LINKFLAGS'] = ''

    base = os.path.join(appsbase, app)

    # Handle custom paths and libraries.
    custom_include_path = os.path.join(base, 'include')
    if os.path.exists(custom_include_path):
        app_env['CPPPATH'] += [custom_include_path]

    custom_include_path = custom_incpath.get(app)
    if custom_include_path:
        app_env['CPPPATH'] += custom_include_path

    custom_link_libs = custom_libs.get(app)
    if custom_link_libs:
        app_env['LIBS'] += custom_link_libs

    # Handle SDL dependencies.
    if app in sdl_apps:
        app_env['LIBS'] += ['SDL']
        app_env['CPPPATH'] += ['#src/lgpl/SDL-1.2.14/include',
                               '#images/local/include']

    # Handle Mesa dependencies.
    if app in mesa_apps:
        app_env['LIBS'] += ['OSMesa']
        app_env['LIBPATH'] += ['%s/libraries' % imagesdir]
        app_env['CPPPATH'] += ['%s/include' % imagesdir]

    # Handle C++-related dependencies.
    if app in set(cpp_apps + sdl_apps + mesa_apps + cpp_11_apps):
        app_env['LIBPATH'] += [os.path.join(imagesdir, 'libraries')]
        app_env['CPPPATH'] += ['#src/subsys/native/include']
        app_env['LINK'] = env['CXX']

    # Handle libui-related dependencies.
    if app in libui_apps:
        app_env['CPPPATH'] += ['#src/user/libraries/libui/include']
        app_env['LIBS'] += ['ui']

    app_env['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s/libraries/ ' % (
        app_env.Dir(imagesdir).abspath,)
    app_env['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s/libs/ ' % (
        app_env.Dir(builddir).abspath,)
    app_env['LINKFLAGS'] += ' -Wl,-rpath-link -Wl,%s ' % (
        app_env.Dir(builddir).abspath,)

    if app in cpp_11_apps:
        app_env['CXXFLAGS'].remove('-std=gnu++98')
        app_env.MergeFlags({'CXXFLAGS': '-std=gnu++11'})

    flags_to_remove = set(remove_flags.get(app, []))
    app_env['CFLAGS'] = list(set(app_env['CFLAGS']) - flags_to_remove)
    app_env['CCFLAGS'] = list(set(app_env['CCFLAGS']) - flags_to_remove)
    app_env['CXXFLAGS'] = list(set(app_env['CXXFLAGS']) - flags_to_remove)

    output = os.path.join(builddir, 'apps', app)
    files = [Glob(os.path.join(base, '*.c')), Glob(os.path.join(base, '*.cc'))]

    app_env.Program(output, files)

    env.Alias("apps", output)

    env.Depends(output, "crt0")
    env.Depends(output, "libs")

SConscript(os.path.join('libraries', 'SConscript'), exports=['env'])
