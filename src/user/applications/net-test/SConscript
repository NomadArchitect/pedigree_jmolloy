####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

import os.path
Import(['env'])

tmp = env.Clone()

builddir = "#" + env["PEDIGREE_BUILD_BASE"]
kerneldir = "#" + env["PEDIGREE_BUILD_KERNEL"]
appdir = "#" + env["PEDIGREE_BUILD_APPS"]
objname = appdir + '/net-test'

env.Alias("apps", objname)

# Dependencies
env.Depends(objname, "crt0")
env.Depends(objname, "subsys")
env.Depends(objname, "libs")

# To include a new subdirectory just add to the list.
subdirs = [
    
]

# To include new files just add to the list, or Glob("*.cpp")
files = [
    Glob("*.c")
]

# Already-built object files to link
objects = [
    kerneldir + '/crt0.o'
]

# To include a new directory for includes, just add it to the list
include = [
    '#/src/subsys/posix/include',
    '.'
]

# To add a library add to the list below
libraries = [
    'gcc',
    'c',
    'm'
]

# To add a library path add to the list below
libpaths = [
    env['LIBGCC'],
    builddir
]

####################################
SConscript([os.path.join(i, 'SConscript') for i in subdirs],exports = ['tmp'])
tmp.objects = [tmp.Object(i) for i in files] + [tmp.File(i) for i in objects]
tmp['CPPPATH'] = [i for i in include]
tmp['LIBS'] = [i for i in libraries]
tmp['LIBPATH'] = [i for i in libpaths]
#^-- Stupid way of doing it but I plan on adding processing.

tmp['CFLAGS'] = tmp['CFLAGS'].replace('-nostdinc -ffreestanding', '')
tmp['CXXFLAGS'] = tmp['CXXFLAGS'].replace('-nostdinc -ffreestanding', '')

if not len(files) == 0:
    build = tmp.Program(objname,tmp.objects,LINKFLAGS='-fno-builtin -U__svr4__ -nostdlib')
