'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''


import os
import pipes

import buildutils.userspace

Import(['env'])

env_clone = env.Clone()

builddir = "#" + env["PEDIGREE_BUILD_BASE"]
kerneldir = "#" + env["PEDIGREE_BUILD_KERNEL"]
moduledir = "#" + env["PEDIGREE_BUILD_MODULES"]
subsysdir = "#" + env["PEDIGREE_BUILD_SUBSYS"]

posix_objname = os.path.join(subsysdir, 'posix.o')

glue_objname = os.path.join(builddir, 'libpedigree-glue.a')

libpthread_objname = os.path.join(builddir, 'libpthread.a')
libpthread_shobjname = os.path.join(builddir, 'libpthread.so')

crt0_objname = os.path.join(kerneldir, 'crt0.o')
crti_objname = os.path.join(kerneldir, 'crti.o')
crtn_objname = os.path.join(kerneldir, 'crtn.o')

libpedigree_c_objname = os.path.join(builddir, 'libpedigree-c.a')
libpedigree_c_shobjname = os.path.join(builddir, 'libpedigree-c.so')

libc_objname = os.path.join(builddir, 'libc.so')

env.Alias("crt", [crt0_objname, crti_objname, crtn_objname])
env.Alias("subsys", posix_objname)
env.Alias("subsys", glue_objname)
env.Alias("pthreads", libpthread_objname)
env.Alias("pthreads", libpthread_shobjname)

env.Depends(libc_objname, "crt")
env.Depends(libc_objname, glue_objname)
env.Depends(libc_objname, libpedigree_c_objname)
env.Depends(libpedigree_c_shobjname, libc_objname)

# To include new files just add to the list, or Glob("*.cpp")
posix_files = [
    Glob("*.cc")
]

glue_files = [
    'glue.c',
    'glue-sysconf.c',
    'glue-fseek.c',
    'glue-fpurge.c',
    'glue-scandir.c',
    'glue-dlmalloc.c',
    'glue-strcasecmp.c',
    'glue-utmpx.c',
    # 'glue-memset.c',
]

if env['ARCH_TARGET'] in ['X86', 'X64']:
    glue_files.extend(['glue-memcpy.c',])

crt0_files = ['crt0.c']

suffix = '-noarch'
if env['ARCH_TARGET'] == 'X86':
    suffix = '-i686'
elif env['ARCH_TARGET'] == 'X64':
    suffix = '-amd64'
elif env['ARCH_TARGET'] == 'PPC':
    suffix = '-ppc'
elif env['ARCH_TARGET'] == 'ARM':
    suffix = '-arm'

posix_files += ["sigret" + suffix + ".s"]
glue_files += ["setjmp" + suffix + ".s"]

pthread_files = ['glue-pthread.c']

# CRTI/CRTN
crti_files = ["crti" + suffix + ".s"]
crtn_files = ["crtn" + suffix + ".s"]

# To include a new directory for includes, just add it to the list
include = [
    './syscalls',
    './include',
    '#/src/modules',
    '#/src/system/include',
    '#/src/modules/system',
    '#/src/subsys/pedigree-c',
    '.'
]

# To add a library add to the list below
if 'STATIC_DRIVERS' in env['CPPDEFINES']:
    libraries = []
else:
    libraries = ['gcc']

# To add a library path add to the list below
libpaths = [
	builddir,
    env['LIBGCC']
]

####################################
env_clone['CPPPATH'] = include
env_clone['LIBS'] = libraries
env_clone['LIBPATH'] = libpaths

final_output = posix_objname
posix_objname = '%s.debug' % (posix_objname,)

if "STATIC_DRIVERS" in env['CPPDEFINES']:
    env_clone['LSCRIPT'] = File("#src/modules/link_static.ld")
else:
    env_clone['LSCRIPT'] = File("#src/modules/link.ld")

env_clone.Program(posix_objname,posix_files,LINKFLAGS='-nostdlib -Wl,-r -T $LSCRIPT')
env_clone.Command(final_output, posix_objname, action="%s -d -o $TARGET $SOURCE" % env['STRIP'])

glueFlags = " -fPIC -DUSE_PIC_SYSCALLS "

env_clone_glue = env_clone.Clone()

# TODO: rip out stdint.h, make sure GCC target provides it.

env_clone_glue['CFLAGS'] = buildutils.userspace.fixFlags(env, env_clone_glue['CFLAGS'])
env_clone_glue['CXXFLAGS'] = buildutils.userspace.fixFlags(env, env_clone_glue['CXXFLAGS'])
env_clone_glue['CFLAGS'] += glueFlags
env_clone_glue['CXXFLAGS'] += glueFlags
env_clone_glue.Library(glue_objname, glue_files)

env_clone_crt0 = env_clone.Clone()

# No libraries needed for CRT0
env_clone_crt0['LIBS'] = ''
env_clone_crt0.Program(crt0_objname, crt0_files, LINKFLAGS='-nostdlib -r')

# CRTI
env_clone_crti = env_clone.Clone()
env_clone_crti['LIBS'] = ''
env_clone_crti.Program(crti_objname, crti_files, LINKFLAGS='-nostdlib -r')

# CRTN
env_clone_crtn = env_clone.Clone()
env_clone_crtn['LIBS'] = ''
env_clone_crtn.Program(crtn_objname, crtn_files, LINKFLAGS='-nostdlib -r')

# libpthread
env_clone_pthread = env_clone.Clone()
env_clone_pthread['CFLAGS'] = buildutils.userspace.fixFlags(env, env_clone_pthread['CFLAGS'])
env_clone_pthread['CXXFLAGS'] = buildutils.userspace.fixFlags(env, env_clone_pthread['CXXFLAGS'])
env_clone_pthread['CFLAGS'] += glueFlags
env_clone_pthread['CXXFLAGS'] += glueFlags
env_clone_pthread.Library(libpthread_objname, pthread_files)
env_clone_pthread.SharedLibrary(libpthread_shobjname, pthread_files, LINKFLAGS='')

# Build libc/libm

if env['ARCH_TARGET'] == 'X86':
    libc_arch = 'i686'
elif env['ARCH_TARGET'] == 'X64':
    libc_arch = 'amd64'
elif env['ARCH_TARGET'] == 'PPC':
    libc_arch = 'ppc'
elif env['ARCH_TARGET'] == 'ARM':
    libc_arch = 'arm'

buildDir = env_clone.Dir(builddir)

base = env_clone.Dir("#")
baseLibc = env_clone.File(builddir + "/stock-libg.a")
baseLibm = env_clone.File(builddir + "/stock-libm.a")
baseInclude = env_clone.Dir("#src/subsys/posix/include")

buildLibc = env_clone.File(builddir + '/libc.so')
buildLibm = env_clone.File(builddir + '/libm.so')
buildLibcA = env_clone.File(builddir + '/libc.a')
buildLibmA = env_clone.File(builddir + '/libm.a')
buildInclude = env_clone.Dir(builddir + '/include-posix')

env.Alias("libs", [buildLibc, buildLibm])
env.Alias("crt0", "crt")

env_clone.Command([buildLibc], [glue_objname, baseLibc],
    " ".join(pipes.quote(s) for s in [
        "@python", os.path.join(base.abspath, "scripts", "buildLibc.py"),
        buildDir.abspath, baseLibc.abspath,
        env_clone.File(glue_objname).abspath,
        env_clone.File(libpedigree_c_objname).abspath, env["AR"],
        env["CC_NOCACHE"], env["STRIP"]
        ]
    )
)

env_clone.Command([buildLibm], [baseLibm],
    " ".join(pipes.quote(s) for s in [
        '@python', os.path.join(base.abspath, 'scripts', 'buildLibm.py'),
        buildDir.abspath, baseLibm.abspath, env["AR"], env['CC_NOCACHE'],
        ]
    )
)

SConscript(os.path.join('newlib', 'SConscript'), exports=['env'])

