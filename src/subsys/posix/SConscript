'''
Copyright (c) 2008-2014, Pedigree Developers

Please see the CONTRIB file in the root of the source tree for a full
list of contributors.

Permission to use, copy, modify, and distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
'''

####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

Import(['env'])

import os

import buildutils.userspace

tmp = env.Clone()

# Build directories
builddir = "#" + env["PEDIGREE_BUILD_BASE"]
kerneldir = "#" + env["PEDIGREE_BUILD_KERNEL"]
moduledir = "#" + env["PEDIGREE_BUILD_MODULES"]
subsysdir = "#" + env["PEDIGREE_BUILD_SUBSYS"]

# Change to then name of this module
posix_objname = subsysdir + '/posix.o'
glue_objname = builddir + '/libpedigree-glue.a'
crt0_objname = kerneldir + '/crt0.o'
libpthread_objname = builddir + '/libpthread.a'
libpthread_shobjname = builddir + '/libpthread.so'
crti_objname = kerneldir + '/crti.o'
crtn_objname = kerneldir + '/crtn.o'
libpedigree_c_objname = builddir + '/libpedigree-c.a'
libpedigree_c_shobjname = builddir + '/libpedigree-c.so'

libc_objname = builddir + '/libc.so'

env.Alias("crt", [crt0_objname, crti_objname, crtn_objname])
env.Alias("subsys", posix_objname)
env.Alias("subsys", glue_objname)
env.Alias("pthreads", libpthread_objname)
env.Alias("pthreads", libpthread_shobjname)

env.Depends(libc_objname, "crt")
env.Depends(libc_objname, glue_objname)
env.Depends(libc_objname, libpedigree_c_objname)
env.Depends(libpedigree_c_shobjname, libc_objname)

# To include a new subdirectory just add to the list.
subdirs = [
    'newlib',
]

# To include new files just add to the list, or Glob("*.cpp")
posix_files = [
    Glob("*.cc")
]

glue_files = [
    'glue.c',
    'glue-sysconf.c',
    'glue-fseek.c',
    'glue-fpurge.c',
    'glue-scandir.c',
    'glue-dlmalloc.c',
    'glue-memcpy.c',
    # 'glue-memset.c',
]

crt0_files = ['crt0.c']

suffix = '-noarch'
if env['ARCH_TARGET'] == 'X86':
    suffix = '-i686'
elif env['ARCH_TARGET'] == 'X64':
    suffix = '-amd64'
elif env['ARCH_TARGET'] == 'PPC':
    suffix = '-ppc'
elif env['ARCH_TARGET'] == 'ARM':
    suffix = '-arm'

posix_files += ["sigret" + suffix + ".s"]
glue_files += ["setjmp" + suffix + ".s"]

pthread_files = ['glue-pthread.c']

# CRTI/CRTN
crti_files = ["crti" + suffix + ".s"]
crtn_files = ["crtn" + suffix + ".s"]

# To include a new directory for includes, just add it to the list
include = [
    './syscalls',
    './include',
    '#/src/modules',
    '#/src/system/include',
    '#/src/modules/system',
    '#/src/subsys/pedigree-c',
    '.'
]

# To add a library add to the list below
if 'STATIC_DRIVERS' in env['CPPDEFINES']:
    libraries = []
else:
    libraries = ['gcc']

# To add a library path add to the list below
libpaths = [
	builddir,
    env['LIBGCC']
]

####################################
SConscript([os.path.join(i, 'SConscript') for i in subdirs],exports = ['env'])
tmp['CPPPATH'] = include
tmp['LIBS'] = libraries
tmp['LIBPATH'] = libpaths

final_output = posix_objname
posix_objname = '%s.debug' % (posix_objname,)

if "STATIC_DRIVERS" in env['CPPDEFINES']:
    build = tmp.Program(posix_objname,posix_files,LINKFLAGS='-nostdlib -Wl,-r -T $LSCRIPT',LSCRIPT=File("#src/modules/link_static.ld"))
    tmp.Command(final_output, posix_objname, action="%s -d -o $TARGET $SOURCE" % env['STRIP'])
else:
    build = tmp.Program(posix_objname,posix_files,LINKFLAGS='-nostdlib -Wl,-r -T $LSCRIPT',LSCRIPT=File("#src/modules/link.ld"))
    tmp.Command(final_output, posix_objname, action="%s -d -o $TARGET $SOURCE" % env['STRIP'])

glueFlags = " -fPIC -DUSE_PIC_SYSCALLS "

tmp_glue = tmp.Clone()

tmp_glue['CFLAGS'] = buildutils.userspace.fixFlags(env, tmp_glue['CFLAGS'])
tmp_glue['CXXFLAGS'] = buildutils.userspace.fixFlags(env, tmp_glue['CXXFLAGS'])
tmp_glue['CFLAGS'] += glueFlags
tmp_glue['CXXFLAGS'] += glueFlags
tmp_glue.Library(glue_objname, glue_files)

tmp_crt0 = tmp.Clone()

# No libraries needed for CRT0
tmp_crt0['LIBS'] = ''
tmp_crt0.Program(crt0_objname, crt0_files, LINKFLAGS='-nostdlib -r')

# CRTI
tmp_crti = tmp.Clone()
tmp_crti['LIBS'] = ''
tmp_crti.Program(crti_objname, crti_files, LINKFLAGS='-nostdlib -r')

# CRTN
tmp_crtn = tmp.Clone()
tmp_crtn['LIBS'] = ''
tmp_crtn.Program(crtn_objname, crtn_files, LINKFLAGS='-nostdlib -r')

# libpthread
tmp_pthread = tmp.Clone()
tmp_pthread['CFLAGS'] = buildutils.userspace.fixFlags(env, tmp_pthread['CFLAGS'])
tmp_pthread['CXXFLAGS'] = buildutils.userspace.fixFlags(env, tmp_pthread['CXXFLAGS'])
tmp_pthread['CFLAGS'] += glueFlags
tmp_pthread['CXXFLAGS'] += glueFlags
tmp_pthread.Library(libpthread_objname, pthread_files)
tmp_pthread.SharedLibrary(libpthread_shobjname, pthread_files, LINKFLAGS='')

# Build libc/libm

if env['ARCH_TARGET'] == 'X86':
    libc_arch = 'i686'
elif env['ARCH_TARGET'] == 'X64':
    libc_arch = 'amd64'
elif env['ARCH_TARGET'] == 'PPC':
    libc_arch = 'ppc'
elif env['ARCH_TARGET'] == 'ARM':
    libc_arch = 'arm'

buildDir = tmp.Dir(builddir)

base = tmp.Dir("#")
baseLibc = tmp.File(builddir + "/stock-libc.a")
baseLibm = tmp.File(builddir + "/stock-libm.a")
baseInclude = tmp.Dir("#src/subsys/posix/include")

buildLibc = tmp.File(builddir + '/libc.so')
buildLibm = tmp.File(builddir + '/libm.so')
buildLibcA = tmp.File(builddir + '/libc.a')
buildLibmA = tmp.File(builddir + '/libm.a')
buildInclude = tmp.Dir(builddir + '/include-posix')

env.Alias("libs", [buildLibc, buildLibm])
env.Alias("crt0", "crt")

# libc will be rebuilt every time the glue files are modified, or whenever the
# base libc.a file is changed.
env.Command([buildLibc],
            [glue_objname, baseLibc],
            "@python " + base.abspath + "/scripts/buildLibc.py " + buildDir.abspath + " " + baseLibc.abspath + " " + tmp.File(glue_objname).abspath + " " + tmp.File(libpedigree_c_objname).abspath + " " + env["AR"] + " " + env["CC_NOCACHE"]
            )

# libm will only ever be rebuilt if the libm.a file changes
env.Command([buildLibm],
            [baseLibm],
            "@python " + base.abspath + "/scripts/buildLibm.py " + buildDir.abspath + " " + baseLibm.abspath + " " + env["AR"] + " " + env["CC_NOCACHE"]
            )
