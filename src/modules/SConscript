####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

import os.path
Import(['env'])

# Common drivers - order is important
driver_common_subdirs = [
    # DMA
    'dma',

    # Pedigree-specific disk I/O
    'ata',
    'partition',

    # Pedigree-specific video
    'nvidia',

    # Pedigree-specific NICs
    '3c90x',
    # 'rtl8139',
    'loopback',

    # Pedigree-specific SCSI layer
    'scsi',

    # Pedigree-specific USB drivers
    'usb-hcd',
    'usb-hub',
    'usb-mass-storage',
    'usb-hid',

    # Generic FTDI driver (USB serial)
    'ftdi',

    # DM9601 driver (USB ethernet)
    'dm9601',

    # CDI framework (NOT the drivers)
    'cdi',
]

# CDI drivers
cdi_drivers = [
    # CDI NIC drivers
    'e1000',
    'pcnet',
    'rtl8139',
    'sis900',

    # CDI Disk drivers
    # 'floppy' # Needs millisecond granularity in cdi_sleep_ms...
]

# Architecture-specific drivers
if env['ARCH_TARGET'] == 'X86' or env['ARCH_TARGET'] == 'X64':
    driver_arch = 'x86'
    driver_arch_subdirs = [
        'pci',
        'ne2k',
        # 'ps2mouse',
        'vbe'
    ]
elif env['ARCH_TARGET'] == 'PPC':
    driver_arch = 'ppc'
    driver_arch_subdirs = [
        'ata-specific',
        'framebuffer',
        'test'
    ]
elif env['ARCH_TARGET'] == 'ARM':
    driver_arch = 'arm'
    driver_arch_subdirs = [
        'usb-glue',
    ]

    # Filter out useless drivers for ARM
    driver_common_subdirs = filter(lambda x: x not in ['ata', 'dma', 'cdi', 'nvidia', '3c90x'], driver_common_subdirs)
    cdi_drivers = []

env['cdi_driver_list'] = cdi_drivers

# Modules - order is important
module_subdirs = [
    'vfs',
    'ext2',
    'fat',
    'iso9660',
    'network-stack',
    'dhcpclient',
    'console',
    'TUI',
    'linker',
    'users',
    #'ramfs',
    #'rawfs',
    'lodisk',
    'usb',
    'splash',
    'config',
    'status_server'
]

if env['installer']:
    module_subdirs += ['installer']
else:
    module_subdirs += ['init']

if env['ARCH_TARGET'] == 'ARM':
    module_subdirs = filter(lambda x: x not in ['splash', 'TUI'], module_subdirs)

# No difference yet, load all modules
initrd_modules = module_subdirs

drivers = ['drivers/' + driver_arch + '/' + i for i in driver_arch_subdirs]
drivers += ['drivers/common/' + i for i in driver_common_subdirs]
modules = ['system/' + i for i in module_subdirs]

SConscript([os.path.join(i, 'SConscript') for i in drivers],exports = ['env'])
SConscript(['drivers/SConscript-cdi'],exports = ['env'])
SConscript([os.path.join(i, 'SConscript') for i in modules],exports = ['env'])

# Ready to generate the initrd...
builddir = env.Dir("#" + env["PEDIGREE_BUILD_BASE"])
initrdFile = env.File("#" + env["PEDIGREE_BUILD_BASE"] + "/initrd.tar")

# initrd lists

# JamesM: Put VBE driver first, then Splash
initrdList = []
if "config" in module_subdirs:
    initrdList += [builddir.abspath + '/modules/config.o']
    module_subdirs.remove("config")
if "pci" in driver_arch_subdirs:
    initrdList += [builddir.abspath + '/drivers/pci.o']
    driver_arch_subdirs.remove("pci")
if "vbe" in driver_arch_subdirs:
    initrdList += [builddir.abspath + '/drivers/vbe.o']
    driver_arch_subdirs.remove("vbe")
if "splash" in module_subdirs:
    initrdList += [builddir.abspath + '/modules/splash.o']
    module_subdirs.remove("splash")

# Add all drivers.
# TODO: Installation should detect hardware and install a custom initrd with
# 		only the necessary drivers to boot up (and then drivers should be
#		loaded on-demand or something)
initrdList += [builddir.abspath + '/drivers/' + i + '.o' for i in driver_arch_subdirs]
initrdList += [builddir.abspath + '/drivers/' + i + '.o' for i in driver_common_subdirs]
initrdList += [builddir.abspath + '/drivers/' + i + '.o' for i in cdi_drivers]

# Only some modules are actually needed for the actual boot of the system
# The rest can be loaded via some form of autoload mechanism (run in the init
# module perhaps?) or on demand via modload.
initrdList += [builddir.abspath + '/modules/' + i + '.o' for i in initrd_modules]

# Subsystems
initrdList += [builddir.abspath + '/subsystems/posix.o']
initrdList += [builddir.abspath + '/subsystems/pedigree-c.o']
if env['ARCH_TARGET'] == 'X86':
    initrdList += [builddir.abspath + '/subsystems/native.o']

initrd = ' '.join(initrdList)

env.Depends(initrdFile, "drivers")
env.Depends(initrdFile, "modules")
env.Depends(initrdFile, "subsys")
env.Alias("initrd", initrdFile)

if('STATIC_DRIVERS' in env['CPPDEFINES']):
    env.Depends("kernel", initrdList) # Kernel depends on all drivers/modules
    env['INITRD_LIST'] = initrdList
else:
    env.Command(initrdFile, None, '@echo Building initrd... && tar --absolute-names --transform="s,/.*/,," -czf $TARGET ' + initrd)
