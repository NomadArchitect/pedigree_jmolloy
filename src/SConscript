####################################
# SCons build system for Pedigree
## Tyler Kennedy (AKA Linuxhq AKA TkTech)
####################################

import os
import shutil
Import(['env'])

# To include a new subdirectory just add to the list.
subdirs = [
    'system',
    'subsys',
    'modules',
    'user'
]

SConscript([os.path.join(i, 'SConscript') for i in subdirs],exports = ['env'])

rootdir = env.Dir("#").abspath
builddir = env.Dir("#" + env["PEDIGREE_BUILD_BASE"]).abspath
imagedir = env.Dir(env['PEDIGREE_IMAGES_DIR']).abspath

# Build the configuration database (no dependencies)
configdb = env.File(builddir + '/config.db')

# Complete the build - image creation
floppyimg = env.File(builddir + '/floppy.img')
hddimg = env.File(builddir + '/hdd.img')

env.Depends(hddimg, 'libs')
env.Depends(hddimg, 'apps')

env.Command(configdb, None, '@cd ' + rootdir + ' && python ./scripts/buildDb.py')

# TODO: If any of these commands fail, they WILL NOT STOP the build!

def buildImageLosetup(target, source, env):
    print "Building " + os.path.basename(target[0].path) + "..."
    
    builddir = env.Dir("#" + env["PEDIGREE_BUILD_BASE"]).abspath
    imagedir = env.Dir(env['PEDIGREE_IMAGES_DIR']).abspath
    appsdir = env.Dir(env['PEDIGREE_BUILD_APPS']).abspath
    
    outFile = target[0].path
    imageBase = source[0].path
    if('floppy' in outFile):
        offset = 0
    else:
        offset = 32256
    source = source[1:]
    
    # Copy the base image to the destination, overwriting any image that
    # may already exist there.
    if('gz' in imageBase):
        shutil.copy(imageBase, "./tmp.tar.gz")
        os.system("tar -xzf tmp.tar.gz")
        os.system("rm -f tmp.tar.gz")
        shutil.move(os.path.basename(imageBase).replace('tar.gz', 'img'), outFile)
    else:
        shutil.copy(imageBase, outFile)

    os.mkdir("tmp")
    os.system("sudo mount -o loop,offset=" + offset + " " + outFile + " ./tmp")
    
    # I want to see the floppy removed soon
    if(not 'floppy' in outFile):
        shutil.copy(builddir + "/config.db", "./tmp/.pedigree-root")
    
    # Copy each input file across
    for i in source:
        otherPath = ''
        if(not 'floppy' in outFile):
            search, prefix = imagedir, ''
            
            # Applications
            if appsdir in i.abspath:
                search = appsdir
                prefix = '/applications'
            
            # Additional Libraries
            elif builddir in i.abspath:
                search = builddir
                prefix = '/libraries'
            
            otherPath = prefix + i.abspath.replace(search, '')
        
        shutil.copy(i.path, "./tmp" + otherPath)
    
    os.system("sudo umount ./tmp")
    
    for i in os.listdir("tmp"):
        os.remove(i)
    os.rmdir("tmp")
    
def buildImageMtools(target, source, env):
    print "Building " + os.path.basename(target[0].path) + "..."
    
    builddir = env.Dir("#" + env["PEDIGREE_BUILD_BASE"]).abspath
    imagedir = env.Dir(env['PEDIGREE_IMAGES_DIR']).abspath
    appsdir = env.Dir(env['PEDIGREE_BUILD_APPS']).abspath
    
    outFile = target[0].path
    imageBase = source[0].path
    source = source[1:]
    
    # Copy the base image to the destination, overwriting any image that
    # may already exist there.
    if('gz' in imageBase):
        shutil.copy(imageBase, "./tmp.tar.gz")
        os.system("tar -xzf tmp.tar.gz")
        os.system("rm -f tmp.tar.gz")
        shutil.move(os.path.basename(imageBase).replace('tar.gz', 'img'), outFile)
    else:
        shutil.copy(imageBase, outFile)
    
    # Open for use in mtools
    mtsetup = env.File("#/scripts/mtsetup.sh").abspath
    os.system("sh " + mtsetup + " " + outFile + " > /dev/null 2>&1")
    
    # This is a horrible way of doing it, but I'd like to see the floppy
    # image removed soon *anyway*.
    destDrive = " C:"
    if('floppy' in outFile):
        destDrive = " A:/"
    else:
        shutil.copy(builddir + "/config.db", ".pedigree-root")
        os.system("mcopy -Do .pedigree-root C:/ > /dev/null 2>&1; rm -f .pedigree-root")
    
    # Copy each input file across
    for i in source:
        otherPath = ''
        if(not 'floppy' in outFile):
            search, prefix = imagedir, ''
            
            # Applications
            if appsdir in i.abspath:
                search = appsdir
                prefix = '/applications'
            
            # Additional Libraries
            elif builddir in i.abspath:
                search = builddir
                prefix = '/libraries'
            
            otherPath = prefix + i.abspath.replace(search, '')
        
        os.system("mcopy -bms -Do " + i.path + destDrive + otherPath + " > /dev/null 2>&1")

if env["installer"]:
    print "Oops, installer images aren't built yet. Tell pcmattman to write Python scripts"
    print "to build these images, please."
else:
    fileList = []
    
    # Build the disk images (whichever are the best choice for this system)
    if(env['havelosetup']):
        fileList += ["#/images/hdd_ext2.tar.gz"]
        buildImage = buildImageLosetup
    else:
        fileList += ["#/images/hdd_fat16.tar.gz"]
        buildImage = buildImageMtools
        
    for root, dirs, files in os.walk(imagedir):
        # Add directory names first
        for j in dirs:
            fileList += [root + '/' + j]
            
        # Then add filenames
        for j in files:
            fileList += [root + '/' + j]

        # Recursive copy is performed, so only grab the first directory
        break
    
    # Add apps to the input list
    fileList += [[i[0] + '/' + j for j in i[2]] for i in os.walk(builddir + '/apps')]
    
    # Add libraries
    fileList += [builddir + '/libc.so', builddir + '/libm.so']

    # Floppy image ahoy!
    # TODO: Move into the hard disk image, to keep things simple.
    env.Command(floppyimg,
                ['#/images/floppy_fat.img', builddir + '/kernel/kernel', builddir + '/initrd.tar', configdb],
                buildImage)
    
    # Build the hard disk image
    env.Command(hddimg, fileList, buildImage)
